# -*- coding: utf-8 -*-
"""
Created on Thu Oct 10 17:48:06 2019

@author: filip
"""

import requests
#import time
#import pandas as pd
from bs4 import BeautifulSoup

baseURL = "https://fbref.com"
idtime = [9, 24]
specificURL = "https://fbref.com/en/comps/" + str(idtime[0]) + "/schedule/-Fixtures"
classTable = "min_width sortable stats_table now_sortable sliding_cols"

class TeamExtraStats:
    def __init__(self, fouls, corners, crosses, touches, tackles, interceptions, aerialsWon,
                 clearances, offsides, goalsKicks, throwIns, longBalls):
        self.fouls = fouls
        self.corners = corners
        self.crosses = crosses
        self.touches = touches
        self.tackles = tackles
        self.interceptions = interceptions
        self.aerialsWon = aerialsWon
        self.clearances = clearances
        self.offsides = offsides
        self.goalsKicks = goalsKicks
        self.throwIns = throwIns
        self.longBalls = longBalls
        
def GetUrlMatches(url):
    urlPartidas = []
    partidaIds = []
    partidaIds = set(partidaIds)
    code = requests.get(url)
    if code.status_code == 200:
        plain = code.text
        soup = BeautifulSoup(plain, "html.parser")
        tabela = soup.find("table", {"class": "stats_table"})
        for item in tabela.findAll("a"):
            link = item.get('href')
            if 'matches' in link:
                temp = link.split('/')
                idPartida = temp[3]
                if(idPartida.count("-") == 0 and idPartida not in partidaIds):
                    partidaIds.add(idPartida)
                    urlPartidas.append({"match": idPartida, "link": baseURL + link})
    return urlPartidas

def TratarStats(stats):
    return 1

def TratarStatsExtra(stats):
    items = stats.findAll("div")    
    print(len(items))
    homefouls = ""
    homecorners = ""
    homecrosses = ""
    hometouches = ""
    hometackles = ""
    homeinterceptions = ""
    homeaerialsWon = ""
    homeclearances = ""
    homeoffsides = ""
    homegoalKicks = ""
    homethrowIns = ""
    homelongBalls = ""
    awayfouls = ""
    awaycorners = ""
    awaycrosses = ""
    awaytouches = ""
    awaytackles = ""
    awayinterceptions = ""
    awayaerialsWon = ""
    awayclearances = ""
    awayoffsides = ""
    awaygoalKicks = ""
    awaythrowIns = ""
    awaylongBalls = ""
    for i in range(len(items)):
        item = items[i]
        if 'Fouls' in item:
        	homefouls = items[i-1]
        	awayfouls = items[i-1]
        if 'Corners' in item:
        	homecorners = items[i-1]
        	awaycorners = items[i+1]
        if 'Crosses' in item:
        	homecrosses = items[i-1]
        	awaycrosses = items[i+1]
        if 'Touches' in item:
        	hometouches = items[i-1]
        	awaytouches = items[i+1]
        if 'Tackles' in item:
        	hometackles = items[i-1]
        	awaytackles = items[i+1]
        if 'Interceptions' in item:
        	homeinterceptions = items[i-1]
        	awayinterceptions = items[i+1]
        if 'Aerials' in item and 'Won' in item:
        	homeaerialsWon = items[i-1]
        	awayaerialsWon = items[i+1]
        if 'Clearances' in item:
        	homeclearances = items[i-1]
        	awayclearances = items[i+1]
        if 'Offsides' in item:
        	homeoffsides = items[i-1]
        	awayoffsides = items[i+1]
        if 'Goal' in item and 'Kicks' in item:
        	homegoalKicks = items[i-1]
        	awaygoalKicks = items[i+1]
        if 'Throw' in item and 'Ins' in item:
        	homethrowIns = items[i-1]
        	awaythrowIns = items[i+1]
        if 'Long' in item and 'Balls' in item:
        	homelongBalls = items[i-1]
        	awaylongBalls = items[i+1]
    home = TeamExtraStats(homefouls, homecorners, homecrosses, hometouches, hometackles, 
                          homeinterceptions, homeaerialsWon, homeclearances, homeoffsides,
                          homegoalKicks, homethrowIns, homelongBalls)
    away = TeamExtraStats(awayfouls, awaycorners, awaycrosses, awaytouches, awaytackles,
                          awayinterceptions, awayaerialsWon, awayclearances, awayoffsides, 
                          awaygoalKicks, awaythrowIns, awaylongBalls)            
    return home, away

def GetInfoMatches(match):
    code = requests.get(match["link"])
    if code.status_code == 200:
        plain = code.text
        soup = BeautifulSoup(plain, "html.parser")
        #stats = soup.find("div", {"id": "team_stats"})
        statsExtra = soup.find("div", {"id": "team_stats_extra"})
        awayTeam, homeTeam = TratarStatsExtra(statsExtra)
        obj = {"awayTouches": awayTeam.touches, "homeTouches": homeTeam.touches}
        return obj

urlsMatch = GetUrlMatches(specificURL)

infoPartidas = list(map(GetInfoMatches, urlsMatch))
